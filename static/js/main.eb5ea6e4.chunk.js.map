{"version":3,"sources":["AppContext.js","Home.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["AppContext","React","createContext","AppProvider","Provider","Consumer","useStyles","makeStyles","theme","root","display","flexWrap","justifyContent","overflow","backgroundColor","palette","background","paper","Home","_useState","useState","_useState2","Object","slicedToArray","isFetching","setIsFetching","classes","_useContext","useContext","_useContext2","appState","handleScroll","window","innerHeight","document","documentElement","scrollTop","offsetHeight","fetchData","axios","get","concat","selected","popular","currentPage","topRated","nowPlaying","then","response","changeState","data","results","catch","error","console","log","useEffect","addEventListener","removeEventListener","react_default","a","createElement","react","className","GridList","cellHeight","cols","gridList","movies","map","item","GridListTile","key","id","src","poster_path","alt","title","flexGrow","MovieTabs","value","setValue","_useState3","category","updateState","_useState4","setAppState","objectSpread","categories","AppBar","position","Tabs","onChange","event","newValue","Tab","label","App","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.eb5ea6e4.chunk.js","sourcesContent":["import React from 'react'\nconst AppContext = React.createContext({})\nexport const AppProvider = AppContext.Provider\nexport const AppConsumer = AppContext.Consumer\nexport default AppContext","import React, { useState, useEffect, Fragment } from 'react';\nimport { useContext } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { GridList, GridListTile } from '@material-ui/core'\nimport AppContext from './AppContext'\nimport axios from 'axios'\nimport AppConsumer from './AppContext'\n\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'space-around',\n        overflow: 'hidden',\n        backgroundColor: theme.palette.background.paper,\n    }\n}));\nvar page = 1\n\nexport default function Home() {\n    const [isFetching, setIsFetching] = useState(false);\n\n\n    const classes = useStyles();\n    const [appState, setAppState] = useContext(AppContext)\n\n    useEffect(() => {\n        setIsFetching(true)\n        fetchData()\n    }, [appState.selected])\n\n    useEffect(() => {\n        window.addEventListener('scroll', handleScroll);\n        return () => window.removeEventListener('scroll', handleScroll);\n    }, []);\n\n    useEffect(() => {\n        if (!isFetching) return;\n        fetchData(page);\n    }, [isFetching]);\n\n    function handleScroll() {\n        if (window.innerHeight + document.documentElement.scrollTop !== document.documentElement.offsetHeight || isFetching) return;\n        setIsFetching(true);\n    }\n\n    function getPageNumber() {\n        if (appState.selected === 'popular') {\n            debugger\n            return appState.popular.currentPage\n        } else if (appState.selected === 'top_rated') {\n            return appState.topRated.currentPage\n        } else if (appState.selected === 'now_playing') {\n            return appState.nowPlaying.currentPage\n        }\n    }\n\n    function fetchData() {\n        axios\n            .get(`https://api.themoviedb.org/3/movie/${appState.selected}?api_key=3d9f6ef05faa3072ee2caf7fb6870964&language=en-US&page=${getPageNumber()}`)\n            .then(response => {\n                appState.changeState(appState.selected, response.data.results)\n                setIsFetching(false)\n            })\n            .catch(error => {\n                console.log(error)\n            })\n    }\n\n\n    return (\n        <Fragment>\n            <div className={classes.root}>\n                <GridList cellHeight={300} cols={5} className={classes.gridList} >\n                    {\n                        appState.popular.movies.map((item) =>\n                            <GridListTile key={item.id}>\n                                <img src={`http://image.tmdb.org/t/p/w185/${item.poster_path}`} alt={item.title} />\n                            </GridListTile>\n                        )\n                    }\n                </GridList>\n                {isFetching && 'Fetching more list items...'}\n            </div >\n        </Fragment>\n    );\n}","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { AppBar, Tabs, Tab } from '@material-ui/core';\nimport Home from './Home'\nimport { AppProvider } from './AppContext'\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n        backgroundColor: theme.palette.background.paper,\n    },\n}));\n\nexport default function MovieTabs() {\n    const classes = useStyles();\n    const [value, setValue] = useState(0);\n    const [appState, setAppState] = useState({\n        selected: 'popular',\n        movies: [],\n        popular: {\n            currentPage: 1,\n            movies: []\n        },\n        topRated: {\n            currentPage: 1,\n            movies: []\n        },\n        nowPlaying: {\n            currentPage: 1,\n            movies: []\n        },\n        changeState: (category,  movies) => {\n            updateState(category, movies)\n        }\n    })\n\n    const updateState = (category, movies) =>{\n        switch (category) {\n            case 'popular':\n                setAppState({ ...appState, popular: { currentPage: appState.currentPage++, movies: movies } })\n                //debugger\n                break;\n            case 'top_rated':\n                setAppState({ ...appState, topRated: { currentPage: appState.currentPage++ , movies: movies } })\n                break;\n            case 'now_playing':\n                setAppState({ ...appState, nowPlaying: { currentPage: appState.currentPage++, movies: movies } })\n                break;\n            default:\n                break\n        }\n        //debugger\n    }\n    const categories = ['popular', 'top_rated', 'now_playing']\n\n    function handleChange(event, newValue) {\n        setValue(newValue);\n        setAppState({ ...appState, selected: categories[newValue] })\n    }\n\n\n    return (\n        <AppProvider value={[appState, setAppState]}>\n            <div className={classes.root}>\n                <AppBar position=\"static\">\n                    <Tabs value={value} onChange={handleChange}>\n                        {\n                            categories.map((item) => {\n                                return <Tab label={item} />\n                            })\n                        }\n                    </Tabs>\n                </AppBar>\n                <Home />\n            </div>\n            {appState && <p>{appState.selected}</p>}\n        </AppProvider>\n    );\n}\n","import React, { Fragment } from 'react';\nimport './App.css';\nimport Header from './Header'\n\nfunction App() {\n  return (\n      <Fragment>\n        <Header />\n      </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}